Users (Patient and Healthcare Practitioner)
-------------------------------------------
// Patient endpoints

GET /api/user/patient/{email}
<- {
  "id": "string",
  "password": "stringst", // salted and hashed
  "salt": "string",
  "name": "string",
  "email": "user@example.com",
  "role": 0,
  "vitals": {
    "ecg": [
      {
        "timestamp": "2022-03-14T20:46:07.619Z",
        "value": 0
      }
    ],
    "skinTemperature": [
      {
        "timestamp": "2022-03-14T20:46:07.619Z",
        "value": 0
      }
    ],
    "spO2": [
      {
        "timestamp": "2022-03-14T20:46:07.619Z",
        "value": 0
      }
    ]
  }
}

POST /api/user/auth/patient/login
-> {
  "email": "user@example.com",
  "password": "stringst", // min 8 characters
}
<- {
  "id": "string",
  "password": "stringst", // salted and hashed
  "salt": "string",
  "name": "string",
  "email": "user@example.com",
  "role": 0,
  "vitals": {
    "ecg": [],
    "skinTemperature": [],
    "spO2": []
  }
}

POST /api/user/auth/patient/register
-> {
  "name": "string",
  "email": "user@example.com",
  "password": "stringst" // min 8 characters
}
<- {
  "id": "string",
  "password": "stringst", // salted and hashed
  "salt": "string",
  "name": "string",
  "email": "user@example.com",
  "role": 0,
  "vitals": {
    "ecg": [
      {
        "timestamp": "2022-03-14T20:46:07.619Z",
        "value": 0
      }
    ],
    "skinTemperature": [
      {
        "timestamp": "2022-03-14T20:46:07.619Z",
        "value": 0
      }
    ],
    "spO2": [
      {
        "timestamp": "2022-03-14T20:46:07.619Z",
        "value": 0
      }
    ]
  }
}

POST /api/user/patient/add/{email}
<- (HTTP Status Code 204)

POST /api/user/patient/remove/{email}
<- (HTTP Status Code 204)

// Healthcare Practitioner endpoints

GET /api/user/hcp/{email}
<- {
  "id": "string",
  "password": "stringst", // salted and hashed
  "salt": "string",
  "name": "string",
  "email": "user@example.com",
  "role": 1,
  "patients": [ "patient@example.com" ]
  }

POST /api/user/auth/hcp/login
-> {
  "email": "user@example.com",
  "password": "stringst", // min 8 characters
}
<- {
  "id": "string",
  "password": "stringst", // salted and hashed
  "salt": "string",
  "name": "string",
  "email": "user@example.com",
  "role": 1,
  "patients": [ "patient@example.com" ]
  }
}

POST /api/user/auth/hcp/register
-> {
  "name": "string",
  "email": "user@example.com",
  "password": "stringst" // min 8 characters
}
<- {
  "id": "string",
  "password": "stringst", // salted and hashed
  "salt": "string",
  "name": "string",
  "email": "user@example.com",
  "role": 1,
  "patients": [ "patient@example.com" ]
  }
}

POST /api/user/hcp/remove/{email}
<- (HTTP Status Code 204)

Data
----
GET /api/user/vitals/patient_list/<UserID> where UserID is doctor's UserID
-> Token
<- {[UserID]}

GET /api/user/vitals/<UserID>
-> Token
<- {ECG: [<timestamp>: <value>],
    HR: [<timestamp>: <value>]
    SpO2: [<timestamp>: <value>]}

PUT /api/user/vitals/<UserID>
-> Token & {ECG: [<timestamp>: <value>],
    SkinTemperature: [<timestamp>: <value>]
    SpO2: [<timestamp>: <value>]}
<- HTTP Status Code


Bluetooth Comms:

struct ecgData {
    char type = always 0000
    uint32_t UnixTimestamp
    uint8_t ecg[3]
    uint8_t spo2[3]
}

struct tempData {
    char type = always FFFF
    uint32_t UnixTimestamp
    uint16_t TempBody
    uint16_t TempAmbient
}
